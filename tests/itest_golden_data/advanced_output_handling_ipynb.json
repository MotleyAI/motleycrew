"def bubble_sort(arr):\n    n = len(arr)\n    for i in range(n):\n        swapped = False\n        for j in range(0, n-i-1):\n            if arr[j] > arr[j+1]:\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n                swapped = True\n        if not swapped:\n            break\n    return arr\n\n# Test the bubble sort function\nsample_list = [64, 34, 25, 12, 22, 11, 90]\nsorted_list = bubble_sort(sample_list)\nprint(sorted_list)\n\nThe `bubble_sort` function sorts a list by repeatedly swapping adjacent elements if they are in the wrong order. The outer loop runs `n` times, where `n` is the length of the list. The inner loop runs `n-i-1` times, where `i` is the current iteration of the outer loop, to avoid re-checking the already sorted elements at the end of the list. An optimization is added with a `swapped` flag to break out of the loop early if no elements were swapped in an inner loop iteration, indicating that the list is already sorted. The test case demonstrates the function by sorting a sample list `[64, 34, 25, 12, 22, 11, 90]`, and the output is `[11, 12, 22, 25, 34, 64, 90]`. The time complexity of bubble sort is O(n^2) in the worst and average cases, but the early exit optimization can improve performance on nearly sorted lists."