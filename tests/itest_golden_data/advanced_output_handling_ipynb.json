"from typing import List\n\ndef bubble_sort(arr: List[int]) -> List[int]:\n    \"\"\"\n    Sorts a list of integers using the bubble sort algorithm.\n\n    Args:\n    arr (List[int]): The list of integers to be sorted.\n\n    Returns:\n    List[int]: The sorted list of integers.\n    \"\"\"\n    n = len(arr)\n    for i in range(n):\n        swapped = False\n        for j in range(0, n-i-1):\n            if arr[j] > arr[j+1]:\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n                swapped = True\n        if not swapped:\n            break\n    return arr\n\n# Test the bubble sort function\nif __name__ == \"__main__\":\n    test_array = [64, 34, 25, 12, 22, 11, 90]\n    sorted_array = bubble_sort(test_array)\n    print(\"Sorted array is:\", sorted_array)\n\nThe `bubble_sort` function sorts a list of integers using the bubble sort algorithm. Bubble sort works by repeatedly stepping through the list, comparing adjacent elements, and swapping them if they are in the wrong order. This process is repeated until the list is sorted. The outer loop runs `n` times, where `n` is the length of the list. The inner loop runs `n-i-1` times to avoid re-checking the already sorted elements at the end of the list. An optimization is added with a `swapped` flag to terminate the algorithm early if no swaps were made during an iteration, indicating that the list is already sorted. The time complexity of bubble sort is O(n^2) in the worst and average cases, and O(n) in the best case when the list is already sorted. The test code verifies the implementation by sorting a sample list and printing the sorted result."