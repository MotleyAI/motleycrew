"def bubble_sort(arr):\n    n = len(arr)\n    for i in range(n):\n        swapped = False\n        for j in range(0, n-i-1):\n            if arr[j] > arr[j+1]:\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n                swapped = True\n        if not swapped:\n            break\n    return arr\n\n# Test the bubble sort function\nsample_list = [64, 34, 25, 12, 22, 11, 90]\nsorted_list = bubble_sort(sample_list)\nprint(sorted_list)\n\nThe `bubble_sort` function implements the bubble sort algorithm. It works by repeatedly stepping through the list, comparing adjacent elements and swapping them if they are in the wrong order. This process is repeated until the list is sorted. The outer loop runs `n` times, where `n` is the length of the list, and the inner loop runs `n-i-1` times, where `i` is the current iteration of the outer loop. This ensures that the largest unsorted element is moved to its correct position in each iteration. An optimization is added with a `swapped` flag to detect if any swaps were made during an iteration. If no swaps were made, the list is already sorted, and the loop can exit early. The time complexity of bubble sort is O(n^2) in the worst and average cases, but it can be O(n) if the list is already sorted."